scalar DateTime

type Mutation {
    nySoknad: Soknad!
    setTelefonnummer(input: SetTelefonnummerInput!): SoknadMutation!
    setAdresse(input: SetAdresseInput!): SoknadMutation!
}

input SetTelefonnummerInput {
    soknadId: ID!
    tlfnr: String
}

type SoknadMutation {
    soknad: Soknad
}

input SetAdresseInput {
    soknadId: ID!
    adresseValg: AdresseValg!
    soknadsAdresse: InputVegadresse
}

type Query {
    soknad(id: ID!): Soknad
}

type Soknad {
    id: ID!
    personalia: Personalia!
    telefon: TelefonData!
    adresser: AdresseData!
    navEnhet: NavEnhet
}

type AdresseData {
    valgt: AdresseValg!
    bostedsadresse: Adresse
    oppholdsadresse: Adresse
    soknadsadresse: Vegadresse
}

enum AdresseValg {
    BOSTED
    OPPHOLD
    SOKNAD
}

type Personalia {
    navn: Navn!
    fnr: String!
    statsborgerskap: String!
}

type TelefonData {
    fraKrr: String
    brukerdefinert: String
}

type Navn {
    fornavn: String!
    mellomnavn: String
    etternavn: String!
}

enum NavEnhetStatus {
    AKTIV
    MIDL_DEAKTIVERT
    DEAKTIVERT
}

type NavEnhet {
    id: ID!
    navn: String!
    status: NavEnhetStatus!
    kommune: String!
}

input InputVegadresse {
    husnummer: String
    husbokstav: String
    bruksenhetsnummer: String
    adressenavn: String
    kommunenummer: String
    bydelsnummer: String
    tilleggsnavn: String
    postnummer: String
}

type Vegadresse {
    husnummer: String
    husbokstav: String
    bruksenhetsnummer: String
    adressenavn: String
    kommunenummer: String
    bydelsnummer: String
    tilleggsnavn: String
    postnummer: String
    poststed: String
}

type Matrikkeladresse {
    bruksenhetsnummer: String
    tilleggsnavn: String
    postnummer: String
    kommunenummer: String
    gaardsnummer: String
    festenummer: String
    seksjonsnummer: String
    undernummer: String
    bruksnummer: String
    poststed: String
}

# TODO: Maybe this should be a union type
type Adresse {
    vegadresse: Vegadresse
    matrikkeladresse: Matrikkeladresse
}
